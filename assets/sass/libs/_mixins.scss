/*testing*/
@mixin testShadow($color: null) {
  box-shadow: 0 0 0 1px $color;
}

/*global*/

@mixin push--auto {
  margin: {
    left:  auto;
    right: auto;
  }
}

@mixin pseudo($display: block, $pos: absolute, $content: '') {
  content:  $content;
  display:  $display;
  position: $pos;
}

@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false) {
  @include pseudo($pos: $position);
  width:  0;
  height: 0;
  @if $round {
    border-radius: 3px;
  }
  @if $direction == down {
    border-left:   $size solid transparent;
    border-right:  $size solid transparent;
    border-top:    $size solid $color;
    margin-top:    0 - round( $size / 2.5 );
  } @else if $direction == up {
    border-left:   $size solid transparent;
    border-right:  $size solid transparent;
    border-bottom: $size solid $color;
    margin-bottom: 0 - round( $size / 2.5 );
  } @else if $direction == right {
    border-top:    $size solid transparent;
    border-bottom: $size solid transparent;
    border-left:   $size solid $color;
    margin-right:  -$size;
  } @else if $direction == left {
    border-top:    $size solid transparent;
    border-bottom: $size solid transparent;
    border-right:  $size solid $color;
    margin-left:   -$size;
  }
}

@mixin font-source-sans($size: false, $colour: false, $weight: false,  $lh: false) {
  font-family: 'Source Sans Pro', Helvetica, Arial, sans-serif;
  @if $size {
    font-size: $size;
  }
  @if $colour {
    color: $colour;
  }
  @if $weight {
    font-weight: $weight;
  }
  @if $lh {
    line-height: $lh;
  }
}

@mixin input-placeholder {
  &.placeholder {
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &::-moz-placeholder {
    @content;
  }
  &:-ms-input-placeholder {
    @content;
  }
  &::-webkit-input-placeholder {
    @content;
  }
}

@mixin hardware($backface: true, $perspective: 1000) {
  @if $backface {
    backface-visibility: hidden;
  }
  perspective: $perspective;
}

@mixin truncate($truncation-boundary) {
  max-width:     $truncation-boundary;
  white-space:   nowrap;
  overflow:      hidden;
  text-overflow: ellipsis;
}

@mixin btn($display: block) {
  background-color:            transparent;
  box-shadow:                  inset 0 0 0 1px palette(border);
  border:                      0;
  cursor:                      pointer;
  display:                     $display;
  text-align:                  center;
  text-decoration:             none;
  text-transform:              uppercase;
  white-space:                 nowrap;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  width:                       100%;
}

/// Makes an element's :before pseudoelement a FontAwesome icon.
/// @param {string} $content Optional content value to use.
/// @param {string} $where Optional pseudoelement to target (before or after).
@mixin icon($content: false, $where: before) {

  text-decoration: none;

  &::#{$where} {

    @if $content {
      content: $content;
    }

    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing:  antialiased;
    font-family:             FontAwesome;
    font-style:              normal;
    font-weight:             normal;
    text-transform:          none;

  }

}

@mixin form() {
  @include vendor('appearance', 'none');
  background: palette(border-bg);
  border:     solid 1px palette(border);
  color:      inherit;
  height:     size(element-height);
  outline:    0;
  padding:    0 1em 0 2.5em;
  width:      100%;
}

/// Applies padding to an element, taking the current element-margin value into account.
/// @param {mixed} $tb Top/bottom padding.
/// @param {mixed} $lr Left/right padding.
/// @param {list} $pad Optional extra padding (in the following order top, right, bottom, left)
/// @param {bool} $important If true, adds !important.
@mixin padding($tb, $lr, $pad: (0,0,0,0), $important: null) {

  @if $important {
    $important: '!important';
  }

  $x: 0.1em;

  @if unit(size(element-margin)) == 'rem' {
    $x: 0.1rem;
  }

  padding: ($tb + nth($pad,1)) ($lr + nth($pad,2)) max($x, $tb - size(element-margin) + nth($pad,3)) ($lr + nth($pad,4)) #{$important};

}

/// Encodes a SVG data URL so IE doesn't choke (via codepen.io/jakob-e/pen/YXXBrp).
/// @param {string} $svg SVG data URL.
/// @return {string} Encoded SVG data URL.
@function svg-url($svg) {

  $svg: str-replace($svg, '"', '\'');
  $svg: str-replace($svg, '%', '%25');
  $svg: str-replace($svg, '<', '%3C');
  $svg: str-replace($svg, '>', '%3E');
  $svg: str-replace($svg, '&', '%26');
  $svg: str-replace($svg, '#', '%23');
  $svg: str-replace($svg, '{', '%7B');
  $svg: str-replace($svg, '}', '%7D');
  $svg: str-replace($svg, ';', '%3B');

  @return url("data:image/svg+xml;charset=utf8,#{$svg}");

}